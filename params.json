{"name":"Lazylist","tagline":"Android Lazy List","body":"LazyList\r\n========\r\n\r\n# Android Lazy List component\r\n\r\n## Version\r\n\r\n1.0.0\r\n\r\n### Description\r\n\r\nLazyList component for Android. ListView which supports lazy loading of resources (data), either\r\nsynchronously (from memory, from local DB...) or asynchronously (HTTP, REST, ...).\r\n\r\nMotivation is, that even when you have the data available in the memory, once you are porting it to\r\nlistView adapter, it can get really slow to initialize the listView with large amount of data (200+ items).\r\nSpeeding this process up is really easy with **LazyList**, because you can first initialize the adapter with\r\nonly small amount of data, but later add all items as user will scroll the list down.\r\n\r\n```\r\npublic class MovieListFragment extends LazyList<Movie> { ... }\r\n```\r\n\r\n```\r\npublic class MovieListAdapter extends LazyListAdapter<Movie> { ... }\r\n```\r\n\r\nAnother case can be using a REST service to load the data. If you have a REST service which supports paging\r\n(you should have :) ) it is easy to override `loadPage` method to call REST service directly. Just\r\ndefine success/error callbacks and new data will automatically refresh the list.\r\n\r\n\r\n    @Override\r\n    protected synchronized void loadPage(final int page) {\r\n        super.loadPage(page);\r\n\r\n        ResourceService.loadMovies(page, new ServerResponseListener<Movie[]>() {\r\n            @Override\r\n            public void onSuccess(Movie[] movies) {\r\n                if (movies.length > 0) {\r\n                    mData.addAll(Arrays.asList(movies));\r\n                    onDataLoadingCompleted(page);\r\n\r\n                    // save data to DB (handles create/update)\r\n                    MovieProvider.saveMoviesToDb(mData);\r\n                } else {\r\n                    onDataLoadingFailed(REASON_LIST_END, null);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(ErrorResponse error) {\r\n                onDataLoadingFailed(LazyList.REASON_SERVER_ERROR, page);\r\n            }\r\n            ...\r\n        });\r\n    }\r\n\r\n\r\n### Usage\r\n\r\nJust import `com.doodeec.lazylist-X.Y.Z.aar` into your project and override adapter and fragment to\r\nuse desired types (you can look at the demo - [Filmster project](http://github.com/doodeec/filmster)\r\nwhere it is used).\r\n\r\n    dependencies {\r\n        compile(name:'com.doodeec.lazylist-1.0.0', ext:'aar')\r\n        ...\r\n    }\r\n\r\n### Support\r\n\r\nSupports generic types - you can extend both adapter and fragment to use any kind of data\r\nSupports Android SDK API10+ (2.3+)\r\n\r\n### Licence\r\n\r\nreleased under Apache 2.0 licence\r\n\r\n### Demo\r\n\r\nCheck out [Filmster project](http://github.com/doodeec/filmster) to see the demo project which\r\nfully takes advantage of **LazyList** library\r\n\r\n### Author\r\n\r\n[Dusan Bartos](http://doodeec.com)\r\nIn case of any questions, do not hesitate to contact me - [doodeec@gmail.com](mailto:doodeec@gmail.com)\r\n","google":"UA-57202262-1","note":"Don't delete this file! It's used internally to help with page regeneration."}